let Koa,Router,bodyParser,mongoose,api;_5f8‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_5f8‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_5f8‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_5f8‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_5f8‍.w("./api",[["default",["api"],function(v){api=v}]]);_5f8‍.t("require")('dotenv').config() // .env 적용






const {PORT,MONGO_URI} = process.env // .env 비구조화 할당

mongoose.connect(MONGO_URI,{useNewUrlParser:true,useFindAndModify:false,useUnifiedTopology:true})
  .then(()=>{
    console.log("Connected to MongoDB")
  }).catch(e=>{
  _5f8‍.g.console.error(e)
})

const app = new Koa()
const router = new Router()

router.use('/api',api.routes())

app.use(bodyParser)
app.use(router.routes()).use(router.allowedMethods) //app 인스턴스에 라우터 적용

const port = PORT || 4000;
app.listen(port,()=>{
  _5f8‍.g.console.log('Listening to port %d',port)
})

/*router.get('/', ctx=>{
  ctx.body='홈'
})

router.get('/about/:name?',ctx=>{ // 파라미터 방식
  const {name}=ctx.params

  ctx.body = name?`name :${name}`:'name이 없습니다'
})

router.get('/posts',ctx=>{ // 쿼리 방식
  const {id}=ctx.query

  ctx.body = id?`포스트#${id}`:'포스트 아이디가 없습니다'
})*/

